/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frm.patient;

import controler.Controler;
import domain.Karton;
import domain.Pregled;
import form.FrmMain;
import frm.appointment.FormAppointment;
import java.io.IOException;
import java.util.ArrayList;

import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import model.TableModelAppointment;
import model.TableModelPatient;
import session.Session;
import usecase.UseCase;

/**
 *
 * @author MSWINDOWS
 */
public class FrmSearch extends javax.swing.JDialog {

    /**
     * Creates new form FrmSearchPatient
     */
    Object parent;
    
    public FrmSearch(FormAppointment parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        populateForm();
    }

    

    public FrmSearch(FrmMain parent, boolean modal) {
        super(parent, modal);
        this.parent = parent;
        initComponents();
        populateForm();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSearch = new javax.swing.JButton();
        btncancel = new javax.swing.JButton();
        btnDetails = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        txtPatname = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btncancel.setText("Cancel");
        btncancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btncancelActionPerformed(evt);
            }
        });

        btnDetails.setText("Details");
        btnDetails.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDetailsActionPerformed(evt);
            }
        });

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        jLabel1.setText("Pat name:");

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(table);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(35, 35, 35)
                        .addComponent(txtPatname, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 452, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 150, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnSearch)
                    .addComponent(btncancel)
                    .addComponent(btnDetails)
                    .addComponent(btnSelect))
                .addGap(21, 21, 21))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPatname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btncancel)
                        .addGap(18, 18, 18)
                        .addComponent(btnDetails)
                        .addGap(18, 18, 18)
                        .addComponent(btnSelect)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        String patName=txtPatname.getText().trim();
        
        if(patName.isEmpty()){
            JOptionPane.showMessageDialog(this, "Enter pat name");
            txtPatname.setText("");
            return;
 
        }
        try {
        if(Session.getInstance().getCurrentUseCase() == UseCase.UC_VIEW_PATIENT || Session.getInstance().getCurrentUseCase() == UseCase.UC_SEARCH_PATIENTS || Session.getInstance().getCurrentUseCase() == UseCase.UC_NEW_APPOINTMENT){
            
                List<Karton> patients = Controler.getInstance().getSearchedPatients(patName);
                TableModelPatient mtp=(TableModelPatient) table.getModel();
                mtp.refresh(patients);
        }else if(Session.getInstance().getCurrentUseCase()==UseCase.UC_SEARCH_APPOINTMENT || Session.getInstance().getCurrentUseCase()==UseCase.UC_EDIT_APPOINTMENT){
              List<Pregled> appointments = Controler.getInstance().getSearchedAppointments(patName);
                TableModelAppointment tma=(TableModelAppointment) table.getModel();
                tma.refresh(appointments);
        
        }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmSearch.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Patient does not exist");
                
                return;
            } catch (Exception ex) {
                Logger.getLogger(FrmSearch.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Patient does not exist");
                return;
            }

    }//GEN-LAST:event_btnSearchActionPerformed

    private void btncancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btncancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btncancelActionPerformed

    private void btnDetailsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDetailsActionPerformed
        // TODO add your handling code here:
         int selectedRow = table.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row!");
        } else {
            switch(Session.getInstance().getCurrentUseCase()){
                case UseCase.UC_NEW_APPOINTMENT:
                    viewPatient(selectedRow);
                    break;
                case UseCase.UC_SEARCH_PATIENTS:
                    viewPatient(selectedRow);
                    break;
                case UseCase.UC_SEARCH_APPOINTMENT:
                    viewAppointment(selectedRow);
                    break;
                case UseCase.UC_VIEW_PATIENT:
                    viewPatient(selectedRow);
                    break;
                case UseCase.UC_EDIT_APPOINTMENT:
                    viewAppointment(selectedRow);
                    break;
            }
            
        }
    }//GEN-LAST:event_btnDetailsActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:
         int selectedRow = table.getSelectedRow();
        if (selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select row");
        } else {
            switch (Session.getInstance().getCurrentUseCase()) {
                case UseCase.UC_NEW_APPOINTMENT:
                    TableModelPatient tmp=(TableModelPatient) table.getModel();
                    Karton patient=tmp.getPatient(selectedRow);
                    
                    ((FormAppointment) parent).setPatient(patient);
                    break;                
            }            
            this.dispose();
        }
    }//GEN-LAST:event_btnSelectActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmSearch.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the dialog */
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDetails;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btncancel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtPatname;
    // End of variables declaration//GEN-END:variables

    private void populateForm() {
         setLocationRelativeTo(null);
        int currentUsecase = Session.getInstance().getCurrentUseCase();
        List<Karton> listPatients=null;
        List<Pregled> listApp=null;
        try {
             listPatients= Controler.getInstance().getAllPatients();
            listApp= Controler.getInstance().getAllAppointments();
            } catch (IOException ex) {
            Logger.getLogger(FrmSearch.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmSearch.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            Logger.getLogger(FrmSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
        switch (currentUsecase) {
            case UseCase.UC_SEARCH_PATIENTS:
                table.setModel(new TableModelPatient(listPatients));
                btnSelect.setVisible(false);
                setTitle("Search patients");
                break;
            case UseCase.UC_NEW_APPOINTMENT:
                table.setModel(new TableModelPatient(listPatients));
                btnSelect.setVisible(true);
                setTitle("Search patients");
                break;
            
            case UseCase.UC_SEARCH_APPOINTMENT:
                table.setModel(new TableModelAppointment(listApp));
                btnSelect.setVisible(false);
               
                setTitle("Search appointments");
                break;
            case UseCase.UC_EDIT_APPOINTMENT:
                table.setModel(new TableModelAppointment(listApp));
                btnSelect.setVisible(false);
               
                setTitle("Search appointments");
                break;
        }
    }

    private void viewPatient(int selectedRow) {
       TableModelPatient tmp=(TableModelPatient) table.getModel();
       Karton patient=tmp.getPatient(selectedRow);
       Session.getInstance().setUseCaseParams(patient);
       
      FrmPatient frmPatient = new FrmPatient(this, true);
        frmPatient.setVisible(true);
       
    }

    private void viewAppointment(int selectedRow) {
       TableModelAppointment tma=(TableModelAppointment) table.getModel();
        Pregled appointment=tma.getAppointment(selectedRow);
        Session.getInstance().setUseCaseParams(appointment);
        FormAppointment frmAppointment=new FormAppointment(this, true);
        frmAppointment.setVisible(true);
       
    }
}
