/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frm.patient;

import controler.Controler;
import domain.Karton;
import domain.Veterinar;
import domain.VrstaZivotinje;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import session.Session;
import usecase.UseCase;

/**
 *
 * @author MSWINDOWS
 */
public class FrmPatient extends javax.swing.JDialog {

    /**
     * Creates new form FrmPatient
     */
    public FrmPatient(FrmSearch parent, boolean modal) {
        super(parent, modal);
        initComponents();
        populateForm();
        adjustForm();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PanelPatient = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtPassportNo = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtOwner = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtTelephone = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        cmbSpecies = new javax.swing.JComboBox<>();
        btnCancel = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnSave = new javax.swing.JButton();
        btnRemove = new javax.swing.JButton();
        txtID = new javax.swing.JTextField();
        lblID = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lblVet = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        PanelPatient.setBorder(javax.swing.BorderFactory.createTitledBorder("Patient"));

        jLabel1.setText("Passport No:");

        jLabel2.setText("Name and surname of the pet owner");

        jLabel3.setText("Telephone number:");

        jLabel4.setText("Pet name:");

        jLabel5.setText("Species");

        cmbSpecies.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnEdit.setText("Edit");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnRemove.setText("Remove");
        btnRemove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRemoveActionPerformed(evt);
            }
        });

        lblID.setText("ID:");

        javax.swing.GroupLayout PanelPatientLayout = new javax.swing.GroupLayout(PanelPatient);
        PanelPatient.setLayout(PanelPatientLayout);
        PanelPatientLayout.setHorizontalGroup(
            PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PanelPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(PanelPatientLayout.createSequentialGroup()
                        .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtOwner)
                            .addComponent(txtTelephone)
                            .addComponent(txtName)
                            .addComponent(cmbSpecies, 0, 247, Short.MAX_VALUE)))
                    .addGroup(PanelPatientLayout.createSequentialGroup()
                        .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(lblID))
                        .addGap(117, 117, 117)
                        .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtID)
                            .addComponent(txtPassportNo, javax.swing.GroupLayout.DEFAULT_SIZE, 248, Short.MAX_VALUE))))
                .addGap(96, 96, 96)
                .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRemove)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnSave, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnEdit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(64, 64, 64))
        );
        PanelPatientLayout.setVerticalGroup(
            PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PanelPatientLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblID))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtPassportNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel))
                .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelPatientLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtOwner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel3)
                            .addComponent(txtTelephone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(PanelPatientLayout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(btnUpdate)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnEdit)))
                .addGroup(PanelPatientLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(PanelPatientLayout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jLabel5))
                    .addGroup(PanelPatientLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(cmbSpecies, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addGap(19, 19, 19)
                .addComponent(btnRemove)
                .addContainerGap(29, Short.MAX_VALUE))
        );

        jLabel7.setText("Vet:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(27, 27, 27)
                        .addComponent(PanelPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(35, 35, 35)
                        .addComponent(jLabel7)
                        .addGap(26, 26, 26)
                        .addComponent(lblVet, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblVet, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(PanelPatient, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
         Session.getInstance().setCurrentUseCase(UseCase.UC_EDIT_PATIENT);
        adjustForm();
        Session.getInstance().setCurrentUseCase(UseCase.UC_VIEW_PATIENT);
    }//GEN-LAST:event_btnEditActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        // TODO add your handling code here:
        if(txtName.getText().isEmpty() || txtOwner.getText().isEmpty() || txtPassportNo.getText().isEmpty() || txtTelephone.getText().isEmpty()){
        
            JOptionPane.showMessageDialog(null, "Fields must not be empty");
        
             return;
        }
       
        if(vaalidate()){
            VrstaZivotinje speace=(VrstaZivotinje) cmbSpecies.getSelectedItem();
            Veterinar vet=Session.getInstance().getCurrentVet();
            String passport=txtPassportNo.getText().trim();
            String owner=txtOwner.getText().trim();
            String name=txtName.getText().trim();
            String telephone=txtTelephone.getText().trim();
            Karton patient =new Karton( passport, owner, name, telephone, speace, vet);
            try {
                Controler.getInstance().savePatient(patient);
                int response = JOptionPane.showConfirmDialog(null, "Patient successfully saved! Do you want to save another patient?", "Confirm",
                        JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
                if (response == JOptionPane.YES_OPTION) {
                    resetFields();
                } else {
                    this.dispose();
                }
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
                 JOptionPane.showMessageDialog(null, "Patient is not saved! Telephone or passport no are not correct");
        
             return;
            }
        } else {
             JOptionPane.showMessageDialog(null, "Patient is not saved! Telephone or passport no are not correct");
        
             return;
        }
        
        
        
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
         if(txtName.getText().isEmpty() || txtOwner.getText().isEmpty() || txtPassportNo.getText().isEmpty() || txtTelephone.getText().isEmpty()){
        
            JOptionPane.showMessageDialog(null, "All fields must be filled");
        
             return;
        }
         
         if(vaalidate()){
            VrstaZivotinje speace=(VrstaZivotinje) cmbSpecies.getSelectedItem();
            Veterinar vet=Session.getInstance().getCurrentVet();
            String passport=txtPassportNo.getText().trim();
            String owner=txtOwner.getText().trim();
            String name=txtName.getText().trim();
            String telephone=txtTelephone.getText().trim();
            int ID=Integer.parseInt(txtID.getText().trim());
             Karton patient =new Karton( ID,passport, owner, name, telephone, speace, vet);
            try {
                Controler.getInstance().updatePatient(patient);
               JOptionPane.showMessageDialog(null, "Patient successfully updated! Do you want to save another patient?");
               this.dispose();
            } catch (ClassNotFoundException ex) {
                Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
            } catch (Exception ex) {
                Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
             JOptionPane.showMessageDialog(null, "Telephone or passport no are not correct");
        
             return;
        }
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnRemoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRemoveActionPerformed
        // TODO add your handling code here:
        try {
            int response = JOptionPane.showConfirmDialog(null, "Do you want to remove patient from database?", "Confirm",
                    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
            if (response == JOptionPane.NO_OPTION) {
                return;
            }
           VrstaZivotinje speace=(VrstaZivotinje) cmbSpecies.getSelectedItem();
            Veterinar vet=Session.getInstance().getCurrentVet();
            String passport=txtPassportNo.getText().trim();
            String owner=txtOwner.getText().trim();
            String name=txtName.getText().trim();
            String telephone=txtTelephone.getText().trim();
            int ID=Integer.parseInt(txtID.getText().trim());
             Karton patient =new Karton( ID,passport, owner, name, telephone, speace, vet);
             
             
            Controler.getInstance().deletePatient(patient);
            JOptionPane.showMessageDialog(null, "Patient successfully deleted!");
            this.dispose();
            
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Patient is not deleted");
            Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
            return;
        }
        
    }//GEN-LAST:event_btnRemoveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmPatient.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
       
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel PanelPatient;
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnRemove;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JComboBox<Object> cmbSpecies;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel lblID;
    private javax.swing.JLabel lblVet;
    private javax.swing.JTextField txtID;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtOwner;
    private javax.swing.JTextField txtPassportNo;
    private javax.swing.JTextField txtTelephone;
    // End of variables declaration//GEN-END:variables

    private void populateForm() {
       populateCurrentVet();
       setLocationwindow();
       populateCbSpecies();
       



    }

    private void adjustForm() {
         switch (Session.getInstance().getCurrentUseCase()) {
            case UseCase.UC_NEW_PATIENT:
                setTitle("New patient");
                btnCancel.setVisible(true);
                btnSave.setVisible(true);
                btnEdit.setVisible(false);
                btnUpdate.setVisible(false);
                btnRemove.setVisible(false);
                cmbSpecies.setEnabled(true);
                lblID.setVisible(false);
                txtID.setVisible(false);
                txtName.setEnabled(true);
                txtOwner.setEnabled(true);
                txtPassportNo.setEnabled(true);
                txtTelephone.setEnabled(true);
               
                break;
            case UseCase.UC_VIEW_PATIENT:
                setTitle("View patient");
                btnCancel.setVisible(true);
                btnSave.setVisible(false);
                btnEdit.setVisible(true);
                btnUpdate.setVisible(false);
                btnRemove.setVisible(true);
                cmbSpecies.setEnabled(false);
                lblID.setVisible(false);
                txtID.setVisible(false);
                txtName.setEnabled(false);
                txtOwner.setEnabled(false);
                txtPassportNo.setEnabled(false);
                txtTelephone.setEnabled(false);
               
                setPatient();
                break;
            case UseCase.UC_SEARCH_PATIENTS:
                setTitle("Search patient");
                btnCancel.setVisible(true);
                btnSave.setVisible(false);
                btnEdit.setVisible(true);
                btnUpdate.setVisible(false);
                btnRemove.setVisible(true);
                cmbSpecies.setEnabled(false);
                lblID.setVisible(false);
                txtID.setVisible(false);
                txtName.setEnabled(false);
                txtOwner.setEnabled(false);
                txtPassportNo.setEnabled(false);
                txtTelephone.setEnabled(false);
                setPatient();
                break;

            case UseCase.UC_NEW_APPOINTMENT:
                setTitle("Search patient");
                btnCancel.setVisible(true);
                btnSave.setVisible(false);
                btnEdit.setVisible(false);
                btnUpdate.setVisible(false);
                btnRemove.setVisible(false);
                cmbSpecies.setEnabled(false);
                lblID.setVisible(false);
                txtID.setVisible(false);
                 txtName.setEnabled(false);
                txtOwner.setEnabled(false);
                txtPassportNo.setEnabled(false);
                txtTelephone.setEnabled(false);
                setPatient();
                break;
            case UseCase.UC_EDIT_PATIENT:
                setTitle("Edit patient");
                btnCancel.setVisible(true);
                btnSave.setVisible(false);
                btnEdit.setVisible(false);
                btnUpdate.setVisible(true);
                btnRemove.setVisible(false);
                cmbSpecies.setEnabled(true);
                txtID.setEnabled(false);
                txtName.setEnabled(true);
                txtOwner.setEnabled(true);
                txtPassportNo.setEnabled(true);
                txtTelephone.setEnabled(true);
                setPatient();
                break;
        }

    }

    private void populateCurrentVet() {
        lblVet.setText("   "+Session.getInstance().getCurrentVet().getImePrezimeVeterinara());
    }

    private void setLocationwindow() {
        setLocationRelativeTo(null);
    }

    private void populateCbSpecies() {
        cmbSpecies.removeAllItems();
        
        try {
            List<VrstaZivotinje> list=Controler.getInstance().getAllSpecies();
            for (VrstaZivotinje species : list) {
                cmbSpecies.addItem(species);
            }
        } catch (IOException ex) {
            Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(FrmPatient.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void setPatient() {
        
        Karton patient = (Karton) Session.getInstance().getUseCaseParams();
        txtID.setText(patient.getSifraKartona()+"");
        txtOwner.setText(patient.getImePrezimeVlasnika());
        txtName.setText(patient.getImePacijenta());
        txtPassportNo.setText(patient.getBrPasosa());
        txtTelephone.setText(patient.getBrTelefonaVlasnika());
        cmbSpecies.setSelectedItem(patient.getVrstaZivotinje()== null ? null : patient.getVrstaZivotinje());
       
 
    }

    

    private void resetFields() {
       txtName.setText("");
       txtOwner.setText("");
       txtPassportNo.setText("");
       txtTelephone.setText("");
    }

   
  private boolean vaalidate(){
    
        boolean response=true;
        if(txtPassportNo.getText().length()!=8){
            response=false;
        }
        if(txtTelephone.getText().length()<9 || txtTelephone.getText().length()>10){
             response=false;
        }

        return response;
    }

 

  
}
